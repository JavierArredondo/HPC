ggdraw(boxplot.variable)
}
my.boxplot(seeds, "area")
my.boxplot = function(df, variable) {
boxplot.variable = ggboxplot(data = df, x = "class", y = variable, color = "class") + border()
ggdraw(boxplot.variable)
}
my.boxplot(seeds, "area")
my.boxplot = function(df, variable) {
boxplot.variable = ggboxplot(data = df, x = "class", y = variable, color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = df, aes(x = variable, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.variable = insert_yaxis_grob(boxplot.variable, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.variable)
}
my.boxplot(seeds, "area")
my.boxplot = function(df, variable) {
boxplot.variable = ggboxplot(data = df, x = "class", y = variable, color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = df, aes(x = variable, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
ggdraw(boxplot.variable)
}
my.boxplot(seeds, "area")
my.boxplot = function(df, variable) {
boxplot.variable = ggboxplot(data = df, x = "class", y = variable, color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = df, alpha = 0.7, size = 0.2) + coord_flip()
boxplot.variable = insert_yaxis_grob(boxplot.variable, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.variable)
}
my.boxplot(seeds, "area")
boxplot.variable = ggboxplot(data = df, x = "class", y = variable, color = "class") + border()
boxplot.variable = ggboxplot(data = df, x = "class", y = "area", color = "class") + border()
boxplot.variable = ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = df, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.variable = insert_yaxis_grob(boxplot.variable, ydens, grid::unit(.2, "null"), position = "right")
boxplot.variable = ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.variable = insert_yaxis_grob(boxplot.variable, ydens, grid::unit(.2, "null"), position = "right")
boxplot.variable = ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.variable, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.variable = insert_yaxis_grob(boxplot.variable, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.variable)
a =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
a
ydens = axis_canvas(a, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
ydens
ydens = axis_canvas(a, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = "area", fill = "class"),
alpha = 0.7, size = 0.2)+
coord_flip()+
ggpubr::fill_palette("jco")
ydens
ydens = axis_canvas(a, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = area, fill = class),
alpha = 0.7, size = 0.2)+
coord_flip()+
ggpubr::fill_palette("jco")
a
ydens
a =  ggboxplot(data = seeds, x = "class", y = area, color = "class") + border()
as.character(area)
boxplot.area =  ggboxplot(data = seeds, x = "class", y = area, color = "class") + border()
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE)+
geom_density(data = seeds, aes(x = area, fill = class),
alpha = 0.7, size = 0.2)+
coord_flip()+
ggpubr::fill_palette("jco")
ggdraw(boxplot.area)
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = area, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.area)
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = "area", fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.area)
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = area, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.area)
library("corrplot")
corrplot(cor.seeds, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# Fuerte correlación entre área y perímetro.
print(cor.seeds)
# Gráficos por clase
library("ggpubr")
library("PerformanceAnalytics")
chart.Correlation(R = seeds.wo.class, histogram = T, pch = 25)
# Lectura de dataset
columns = c("area", "perimeter", "compactness", "length", "width", "AC", "lengthGroove", "class")
url = "https://www.dl.dropboxusercontent.com/s/wrexlo5im3g5ioi/seeds_dataset.csv"
seeds = read.csv(url, header = F, sep=",", col.names = columns)
seeds$class = factor(seeds$class, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
seeds.wo.class = data[, -8]
seeds.wo.class = seeds[, -8]
head(seeds.wo.class)
library(mclust)
library(factoextra)
library(FactoMineR)
# Lectura de dataset
columns = c("area", "perimeter", "compactness", "length", "width", "AC", "lengthGroove", "class")
url = "https://www.dl.dropboxusercontent.com/s/wrexlo5im3g5ioi/seeds_dataset.csv"
seeds = read.csv(url, header = F, sep=",", col.names = columns)
seeds$class = factor(seeds$class, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
seeds.wo.class = seeds[, -8]
head(seeds.wo.class)
seeds.scaled = scale(seeds.wo.class)
head(data.scaled)
head(seeds.scaled)
mod1 =  Mclust(seeds.scaled)
summary(mod1)
fviz_mclust(mod1, "classification", geom = "point", pointsize = 1.5, palette = "jco")
mod2 =  Mclust(seeds.scaled, G = 3)
summary(mod2)
fviz_mclust(mod2, "classification", geom = "point", pointsize = 1.5, palette = "jco")
summary(mod1, parameters = T)
mod3 = Mclust(seeds.scaled, prior = priorControl(functionName = "defaultPrior", shrinkage=0.1))
summary(mod3)
fviz_mclust(mod3, "classification", geom = "point", pointsize = 1.5)
fviz_nbclust(seeds.scaled, kmeans, method = "gap_stat")
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = data.without.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(bic)
plot(bic)
fviz_mclust_bic(object = bic)
fviz_mclust_bic(object = mod1)
fviz_mclust_bic(object = mod2)
fviz_mclust_bic(object = mod1)
plot(bic)
fviz_mclust_bic(object = mod1)
plot(bic)
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(bic)
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(bic)
model1 = Mclust(data = data.scaled, G = 3, x = bic)
model1 = Mclust(data = seeds.scaled, G = 3, x = bic)
summary(model1)
fviz_mclust(model1, "classification", geom = "point", palette = "jco")
fviz_mclust(model1, "BIC", palette = "jco")
model1 = Mclust(data = seeds.scaled, x = bic)
summary(model1)
fviz_mclust(model1, "BIC", palette = "jco")
summary(model1)
fviz_mclust(model1, "BIC", palette = "jco")
fviz_mclust(model1, "classification", geom = "point", palette = "jco")
model1 = Mclust(data = seeds.scaled, x = bic)
summary(model1)
fviz_mclust(model1, "BIC")
fviz_mclust(model1, "classification", geom = "point")
model2  = Mclust(data = seeds.scaled, x = bic, modelNames = "VEV")
summary(model2)
fviz_mclust(model2, "BIC")
fviz_mclust(model2, "classification", geom = "point")
model1 = Mclust(data = seeds.scaled, x = bic)
summary(model1)
fviz_mclust(model1, "BIC")
fviz_mclust(model1, "classification", geom = "point")
model2  = Mclust(data = seeds.scaled, x = bic, modelNames = "VEV")
summary(model2)
fviz_mclust(model2, "BIC")
fviz_mclust(model2, "classification", geom = "point")
model3  = Mclust(data = seeds.scaled, x = bic, modelNames = "VVV")
summary(model3)
fviz_mclust(model3, "BIC")
fviz_mclust(model3, "classification", geom = "point")
wea$a = seeds$class
wea = data.frame()
wea$a = seeds$class
View(model3)
seeds$mod1 = model1$classification
seeds$mod2 = model2$classification
seeds$mod3 = model3$classification
head(seeds)
View(seeds)
summary(seeds[seeds$mod1 == 1, ])
summary(seeds[seeds$mod1 == 1, ])
summary(seeds[seeds$mod1 == 2, ])
summary(seeds[seeds$mod1 == 3, ])
sum(seeds$mod1 == 1)
sum(seeds$mod1 == 1)
sum(seeds$mod1 == 2)
sum(seeds$mod1 == 3)
sum(seeds$mod1 == 1 & seeds$class == "Kama")
sum(seeds$mod1 == 1 & seeds$class == "Kama")
sum(seeds$mod1 == 1 & seeds$class == "Rosa")
sum(seeds$mod1 == 1 & seeds$class == "Kanadian")
sum(seeds$mod1 == 2 & seeds$class == "Kama")
sum(seeds$mod1 == 2 & seeds$class == "Rosa")
sum(seeds$mod1 == 2 & seeds$class == "Kanadian")
sum(seeds$mod1 == 3 & seeds$class == "Kama")
sum(seeds$mod1 == 3 & seeds$class == "Rosa")
sum(seeds$mod1 == 3 & seeds$class == "Kanadian")
sum(seeds$mod1 == 1 & seeds$class == "Kama")
sum(seeds$mod1 == 1 & seeds$class == "Rosa")
sum(seeds$mod1 == 1 & seeds$class == "Kanadian")
sum(seeds$mod1 == 2 & seeds$class == "Kama")
sum(seeds$mod1 == 2 & seeds$class == "Rosa")
sum(seeds$mod1 == 2 & seeds$class == "Kanadian")
sum(seeds$mod1 == 3 & seeds$class == "Kama")
sum(seeds$mod1 == 3 & seeds$class == "Rosa")
sum(seeds$mod1 == 3 & seeds$class == "Kanadian")
sum(seeds$mod1 == 3 & seeds$class == "Kama")
sum(seeds$mod1 == 3 & seeds$class == "Rosa")
sum(seeds$mod1 == 3 & seeds$class == "Kanadian")
sum(seeds$mod1 == 1 & seeds$class == "Canadian")
sum(seeds$mod1 == 2 & seeds$class == "Kama")
sum(seeds$mod1 == 2 & seeds$class == "Rosa")
sum(seeds$mod1 == 2 & seeds$class == "Canadian")
sum(seeds$mod1 == 3 & seeds$class == "Kama")
sum(seeds$mod1 == 3 & seeds$class == "Rosa")
sum(seeds$mod1 == 3 & seeds$class == "Canadian")
sum(seeds$mod1 == 1 & seeds$class == "Kama") # 59
sum(seeds$mod1 == 1 & seeds$class == "Rosa") # 1
sum(seeds$mod1 == 1 & seeds$class == "Canadian") # 0
sum(seeds$mod1 == 2 & seeds$class == "Kama") # 0
sum(seeds$mod1 == 2 & seeds$class == "Kama") # 1
sum(seeds$mod1 == 2 & seeds$class == "Canadian") # 69
sum(seeds$mod1 == 2 & seeds$class == "Kama") # 1
sum(seeds$mod1 == 2 & seeds$class == "Rosa") # 1
sum(seeds$mod1 == 2 & seeds$class == "Canadian") # 69
sum(seeds$mod1 == 3 & seeds$class == "Kama") # 10
sum(seeds$mod1 == 3 & seeds$class == "Rosa") # 0
sum(seeds$mod1 == 3 & seeds$class == "Canadian") # 70
plot(model1, what = "classification")
seeds$mod1 = factor(seeds$mod1, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
CrossTable(data$class, model1$classification)
CrossTable(seeds$class, seeds$mod1)
conf.matrix.mod1 = (seeds$class, seeds$mod1)
conf.matrix.mod1 = table(seeds$class, seeds$mod1)
print(conf.matrix)
print(conf.matrix.mod1)
plot(conf.matrix.mod1)
print(conf.matrix)
# Análisis para segundo modelo
summary(seeds[seeds$mod2 == 1, ])
summary(seeds[seeds$mod2 == 2, ])
summary(seeds[seeds$mod2 == 3, ])
sum(seeds$mod2 == 1 & seeds$class == "Kama") # 59
sum(seeds$mod2 == 1 & seeds$class == "Rosa") # 1
sum(seeds$mod2 == 1 & seeds$class == "Canadian") # 0
sum(seeds$mod2 == 2 & seeds$class == "Kama") # 1
sum(seeds$mod2 == 2 & seeds$class == "Rosa") # 69
sum(seeds$mod2 == 2 & seeds$class == "Canadian") # 0
sum(seeds$mod2 == 3 & seeds$class == "Kama") # 10
sum(seeds$mod2 == 3 & seeds$class == "Rosa") # 0
sum(seeds$mod2 == 3 & seeds$class == "Canadian") # 70
plot(model2, what = "classification")
seeds$mod2 = factor(seeds$mod2, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
conf.matrix.mod2 = table(seeds$class, seeds$mod2)
print(conf.matrix.mod2)
plot(conf.matrix.mod2)
# Análisis para tercer modelo
summary(seeds[seeds$mod3 == 1, ])
summary(seeds[seeds$mod3 == 2, ])
summary(seeds[seeds$mod3 == 3, ])
sum(seeds$mod3 == 1 & seeds$class == "Kama") # 61
sum(seeds$mod3 == 1 & seeds$class == "Rosa") # 1
sum(seeds$mod3 == 1 & seeds$class == "Canadian") # 6
sum(seeds$mod3 == 2 & seeds$class == "Kama") # 3
sum(seeds$mod3 == 2 & seeds$class == "Rosa") # 69
sum(seeds$mod3 == 2 & seeds$class == "Canadian") # 0
sum(seeds$mod3 == 3 & seeds$class == "Kama") # 6
sum(seeds$mod3 == 3 & seeds$class == "Rosa") # 0
sum(seeds$mod3 == 3 & seeds$class == "Canadian") # 64
plot(model3, what = "classification")
seeds$mod3 = factor(seeds$mod3, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
conf.matrix.mod3 = table(seeds$class, seeds$mod3)
print(conf.matrix.mod3)
CrossTable(seeds$class, seeds$mod3
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
library("gmodels")
CrossTable(seeds$class, seeds$mod3
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
CrossTable(seeds$class, seeds$mod3, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
a = CrossTable(seeds$class, seeds$mod3, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
plot(a)
a = crosstab(seeds$class, seeds$mod3, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
install.packages("descr")
library("descr")
a = crosstab(seeds$class, seeds$mod3, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
a
AccuracyAssessment(conf.matrix.mod10)
install.packages("greenbrown")
library("caret")
a = confusionMatrix(conf.matrix.mod1)
a
conf.matrix.mod1 = confusionMatrix(table(seeds$class, seeds$mod1))
conf.matrix.mod2 = confusionMatrix(table(seeds$class, seeds$mod2))
conf.matrix.mod3 = confusionMatrix(table(seeds$class, seeds$mod3))
print(conf.matrix.mod1)
print(conf.matrix.mod2)
print(conf.matrix.mod3)
fviz_cluster(mod1)
fviz_cluster(model1)
fviz_cluster(model1, axes = 3)
fviz_cluster(model1, axes = c(1, 2))
fviz_cluster(model1, axes = c(1, 3))
fviz_cluster(model1, axes = c(1, 2,3))
fviz_cluster(model1, axes = c(1,2))
# Lectura de dataset
columns = c("area", "perimeter", "compactness", "length", "width", "AC", "lengthGroove", "class")
url = "https://www.dl.dropboxusercontent.com/s/wrexlo5im3g5ioi/seeds_dataset.csv"
seeds = read.csv(url, header = F, sep=",", col.names = columns)
seeds$class = factor(seeds$class, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
seeds.wo.class = seeds[, -8]
head(seeds.wo.class)
seeds.scaled = scale(seeds.wo.class)
head(seeds.scaled)
# Se observa algunos modelos en los cuales se analiza como se comportan a través de distintos parámetros
mod1 =  Mclust(seeds.scaled)
summary(mod1, parameters = T)
summary(mod1)
fviz_mclust(mod1, "classification", geom = "point", pointsize = 1.5)
mod2 =  Mclust(seeds.scaled, G = 3)
summary(mod2, parameters = T)
summary(mod2)
fviz_mclust(mod2, "classification", geom = "point", pointsize = 1.5)
mod3 = Mclust(seeds.scaled, prior = priorControl(functionName = "defaultPrior", shrinkage=0.1))
summary(mod3)
fviz_mclust(mod3, "classification", geom = "point", pointsize = 1.5)
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(bic)
plot(bic)
model1 = Mclust(data = seeds.scaled, x = bic)
summary(model1)
fviz_mclust(model1, "BIC")
fviz_mclust(model1, "classification", geom = "point")
model2  = Mclust(data = seeds.scaled, x = bic, modelNames = "VEV")
model3  = Mclust(data = seeds.scaled, x = bic, modelNames = "VVV")
seeds$mod1 = model1$classification
seeds$mod2 = model2$classification
seeds$mod3 = model3$classification
View(seeds)
# Análisis para primer modelo
summary(seeds[seeds$mod1 == 1, ])
summary(seeds[seeds$mod1 == 2, ])
summary(seeds[seeds$mod1 == 3, ])
plot(model1, what = "classification")
seeds$mod1 = factor(seeds$mod1, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
conf.matrix.mod1 = confusionMatrix(table(seeds$class, seeds$mod1))
print(conf.matrix.mod1)
# Análisis para segundo modelo
summary(seeds[seeds$mod2 == 1, ])
summary(seeds[seeds$mod2 == 2, ])
summary(seeds[seeds$mod2 == 3, ])
sum(seeds$mod2 == 1 & seeds$class == "Kama") # 61
sum(seeds$mod2 == 1 & seeds$class == "Rosa") # 1
sum(seeds$mod2 == 1 & seeds$class == "Canadian") # 6
sum(seeds$mod2 == 2 & seeds$class == "Kama") # 3
sum(seeds$mod2 == 2 & seeds$class == "Rosa") # 69
sum(seeds$mod2 == 2 & seeds$class == "Canadian") # 0
sum(seeds$mod2 == 3 & seeds$class == "Kama") # 6
sum(seeds$mod2 == 3 & seeds$class == "Rosa") # 0
sum(seeds$mod2 == 3 & seeds$class == "Canadian") # 64
plot(model2, what = "classification")
seeds$mod2 = factor(seeds$mod2, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
conf.matrix.mod2 = confusionMatrix(table(seeds$class, seeds$mod2))
# Análisis para tercer modelo
summary(seeds[seeds$mod3 == 1, ])
summary(seeds[seeds$mod3 == 2, ])
summary(seeds[seeds$mod3 == 3, ])
sum(seeds$mod3 == 1 & seeds$class == "Kama") # 58
sum(seeds$mod3 == 1 & seeds$class == "Rosa") # 0
sum(seeds$mod3 == 1 & seeds$class == "Canadian") # 2
sum(seeds$mod3 == 2 & seeds$class == "Kama") # 6
sum(seeds$mod3 == 2 & seeds$class == "Rosa") # 70
sum(seeds$mod3 == 2 & seeds$class == "Canadian") # 0
sum(seeds$mod3 == 3 & seeds$class == "Kama") # 6
sum(seeds$mod3 == 3 & seeds$class == "Rosa") # 0
sum(seeds$mod3 == 3 & seeds$class == "Canadian") # 68
plot(model3, what = "classification")
seeds$mod3 = factor(seeds$mod3, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
conf.matrix.mod3 = confusionMatrix(table(seeds$class, seeds$mod3))
print(conf.matrix.mod1)
print(conf.matrix.mod2)
print(conf.matrix.mod3)
# Lectura de dataset
columns = c("area", "perimeter", "compactness", "length", "width", "AC", "lengthGroove", "class")
url = "https://www.dl.dropboxusercontent.com/s/wrexlo5im3g5ioi/seeds_dataset.csv"
seeds = read.csv(url, header = F, sep=",", col.names = columns)
seeds$class = factor(seeds$class, levels = c(1,2,3), labels = c("Kama", "Rosa", "Canadian"))
#  Tabla resumen de los datos
summary(seeds)
# Quitamos la clase a un df: seeds without class
seeds.wo.class = seeds[, -8]
# Análisis de correlación de los distintos atributos
cor.seeds = cor(seeds.wo.class)
library("PerformanceAnalytics")
chart.Correlation(R = seeds.wo.class, histogram = T, pch = 25)
library("corrplot")
corrplot(cor.seeds, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
# Fuerte correlación entre área y perímetro.
print(cor.seeds)
# Hacerlo por atributo
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = area, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.area)
# Hacerlo por atributo
boxplot.area =  ggboxplot(data = seeds, x = "class", y = "area", color = "class", add = "jitter") + border()
ydens = axis_canvas(boxplot.area, axis = "y", coord_flip = TRUE) + geom_density(data = seeds, aes(x = area, fill = class), alpha = 0.7, size = 0.2) + coord_flip()
boxplot.area = insert_yaxis_grob(boxplot.area, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(boxplot.area)
fviz_nbclust(seeds.scaled, kmeans, method = "gap_stat")
# ICL
icl = mclustICL(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(icl)
plot(bic)
print(bic)
model1 = Mclust(data = seeds.scaled, x = icl)
# Se calcula el BIC para ver cual modelo conviene más
bic = mclustBIC(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(bic)
plot(bic)
# ICL
icl = mclustICL(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
fviz_mclust(model1, "BIC")
print(bic)
fviz_mclust(model1, "ICL")
plot(icl)
plot(model1, what = "density", type = "persp")
# ICL
icl = mclustICL(data = seeds.wo.class, prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
print(icl)
plot(icl)
plot(icl)
plot(icl)
legend(1,3)
plot(icl) + legend(1,3)
plot(icl)
legend("topright", pch = c(3, 19, NA, 3, 19),
col = c("green", "green", NA, "blue", "blue"),
legend = c("green cross", "green dot", NA, "blue cross", "blue dot"))
plot(icl)
legend("topright")
print(icl)
model1 = Mclust(data = seeds.scaled, x = bic)
summary(model1)
fviz_mclust(model1, "BIC")
fviz_mclust(model1, "classification", geom = "point")
fviz_mclust(model1, "classification", geom = "point", ellipse.type = "t")
fviz_mclust(model1, "classification", geom = "point", main="daklsd")
fviz_mclust(model1, "classification", geom = "point", main="daklsd", subtitle = "jkhdas")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV,3")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", sub = "kjdhslajk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", sub = "kjdhslajk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", title = "jk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", sub = "jk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", submain = "jk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", submain = "jk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", caption = "jk")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", title = "jk", subtitle="jkdh")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", ggtheme = ggpar(title="jkla"))
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", ggpar(title="jkla"))
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", ggtheme = ggpar())
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3",legend=NULL)
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", legend=NULL, xlab = "Number of components")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", legend=NULL)
model3  = Mclust(data = seeds.scaled, x = bic, modelNames = "VVV", main="Model VVV, 3")
model2  = Mclust(data = seeds.scaled, x = bic, modelNames = "VEV", main="Model VEV, 3")
summary(model2)
fviz_mclust(model2, "BIC")
fviz_mclust(model3, "classification", geom = "point", , main="Model VVV, 3")
fviz_mclust(model3, "classification", geom = "point", main="Model VVV, 3")
model3  = Mclust(data = seeds.scaled, x = bic, modelNames = "VVV",  main="Model VEV, 3")
fviz_mclust(model2, "classification", geom = "point",  main="Model VEV, 3")
plot(model1, what = "BIC")
model1
print(mod1)
a = PCA(seeds.scaled, scale.unit = TRUE, ncp = 5, graph = TRUE)
plot(a)
plot(a, type = "persp")
plot(a, what = "desnsity")
model1$x
model1$call
model1$data
model1$parameters
fviz_mclust(model2, "classification", geom = "point",  main="Model VEV, 3")
fviz_mclust(model1, "classification", geom = "point", main="Model EEV, 3", legend=NULL)
fviz_mclust(model3, "classification", geom = "point", main="Model VVV, 3")
chart.Correlation(R = seeds.wo.class, histogram = T, pch = 25)
plot(model2, what = "density", type = "persp")
plot(model3, what = "density", type = "persp")
plot(model1, what = "classification")
fviz_mclust(model1, "uncertainty", geom = "point", main="Model EEV, 3", legend=NULL)
fviz_mclust(model1, "uncertainty", geom = "point", main="Model EEV, 3", legend=NULL)
fviz_mclust(model1, "classification", main="Model EEV, 3", legend=NULL)
fviz_mclust(model1, "uncertainty", main="Model EEV, 3", legend=NULL)
library("corrplot")
corrplot(cor.seeds, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
plot(model1, what = "classification")
setwd("HPC/Scripts/")
imagen = as.matrix(read.table(file = "pikachu.raw"))
image(x = imagen, col = c("white", "black"), axes = F)
imagen = as.matrix(read.table(file = "../Laboratorio 1/output/pikachu_sdilation.raw"))
image(x = imagen, col = c("white", "black"), axes = F)
